import type { NextPage } from "next";

import Head from "next/head";
import Window from "../components/Window";

import { useAppSelector, useAppDispatch } from "../store/hooks";
import { selectTopmostValue, selectAllWindows } from "../store/reducers/windowManager";
import { EAppicationType, EWindowStatus } from "../types/index.enums";
import TaskBar from "../components/TaskBar";
import TerminalWindow from "../components/Window/TerminalWindow";
import ReaderWindow from "../components/Window/ReaderWindow";
import ManagerWindow from "../components/Window/ManagerWindow";
import EditorWindow from "../components/Window/EditorWindow";
import DesktopIcon from "../components/DesktopIcon";
import { IFile, IPosition } from "../types/index.interfaces";
import TopBar from "../components/TopBar";
import TicTacToeWindow from "../components/Window/TicTacToeWindow";

import fs from "../data/fs.json";
import { useEffect } from "react";
import { calculateDesktopIconPosition } from "../functions";
import SidePanel from "../components/SidePanel";

// redux select
import { addFileSystem, selectFileById, selectFilesbByParentPath } from "../store/reducers/fileSystem";
import { selectOpenSidePanel } from "../store/reducers/helperSidePanel";

const Home: NextPage = () => {
  const windows = useAppSelector(selectAllWindows);
  const desktopFiles = useAppSelector(selectFilesbByParentPath("/root/desktop/"));
  const isHelperSidePanelOpen = useAppSelector(selectOpenSidePanel);
  const currentFile = useAppSelector(selectFileById("04633775-1fcb-496c-8376-063283cf087a"));
  const topmost = useAppSelector(selectTopmostValue);

  const dispatch = useAppDispatch();

  const usableWindows = windows.filter((w) => w.state !== EWindowStatus.Minimized);

  const renderDesktop = () => {
    if (!desktopFiles || desktopFiles.length <= 0) return;

    // return desktopFiles.map((df) => <DesktopIcon key={df.id} file={df} />);
    let pos: IPosition = { x: 0, y: 0 };
    return desktopFiles.map((df, index) => {
      pos = calculateDesktopIconPosition(pos, index);
      return <DesktopIcon key={df.id} position={{ ...pos }} file={df} />;
    });
  };

  const renderWindows = () => {
    return usableWindows.map((w) => {
      switch (w.type) {
        case EAppicationType.Terminal:
          return <TerminalWindow key={w.id} content={w} />;
        case EAppicationType.Reader:
          return <ReaderWindow key={w.id} content={w} />;
        case EAppicationType.Editor:
          return <EditorWindow key={w.id} content={w} />;
        case EAppicationType.Manager:
          return <ManagerWindow key={w.id} content={w} />;
        case EAppicationType.TicTacToe:
          return <TicTacToeWindow key={w.id} content={w} />;
        default:
          return <Window key={w.id} content={w} />;
      }
    });
  };

  const renderSidePanel = () => {
    return <SidePanel />;
  };

  useEffect(() => {
    let local = localStorage.getItem("fs");
    if (!local) {
      const stringFs = JSON.stringify(fs);
      localStorage.setItem("fs", stringFs);
      local = stringFs;
    }
    const localFilesystem: IFile = JSON.parse(local);
    dispatch(addFileSystem(localFilesystem));
  }, []);

  return (
    <div className="flex flex-col h-screen min-h-screen overscroll-y-none  bg-gradient-to-br from-yellow-300 via-red-300 to-pink-400">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <TopBar />
      <main className="flex justify-center items-center h-screen overscroll-y-none">
        {renderDesktop()}
        {renderWindows()}
        {isHelperSidePanelOpen && renderSidePanel()}
      </main>
      <footer className="z-50">
        <TaskBar />
      </footer>
    </div>
  );
};

export default Home;
